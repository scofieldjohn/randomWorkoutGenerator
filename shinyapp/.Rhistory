library(shiny)
library(shinyWidgets)
ui <- shinyUI(
fluidPage(
shinyWidgets::panel(
fluidRow(
column(12, align="center",
actionButton("rmd", "Create Workout"),
downloadButton("report", "Download WOD")
)
))
,uiOutput("test")
)
)
server <- function(input, output) {
observeEvent(input$rmd, {
output$test <- renderUI({
withMathJax(includeHTML(rmarkdown::render("create_dailyWorkout.Rmd")))
})
})
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.pdf",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "create_dailyWorkout.Rmd")
file.copy("create_dailyWorkout.Rmd", tempReport, overwrite = TRUE)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
envir = new.env(parent = globalenv())
)
}
)
}
shinyApp(ui, server)
library(shiny)
library(shinyWidgets)
ui <- shinyUI(
fluidPage(
shinyWidgets::panel(
fluidRow(
column(12, align="center",
actionButton("rmd", "Create Workout"),
downloadButton("report", "Download WOD")
)
))
,uiOutput("test")
)
)
server <- function(input, output) {
observeEvent(input$rmd, {
output$test <- renderUI({
withMathJax(includeHTML(rmarkdown::render("create_dailyWorkout.Rmd")))
})
})
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.pdf",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "create_dailyWorkoutPDF.Rmd")
file.copy("create_dailyWorkoutPDF.Rmd", tempReport, overwrite = TRUE)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
envir = new.env(parent = globalenv())
)
}
)
}
shinyApp(ui, server)
library(shiny)
library(shinyWidgets)
ui <- shinyUI(
fluidPage(
shinyWidgets::panel(
fluidRow(
column(12, align="center",
actionButton("rmd", "Create Workout"),
downloadButton("report", "Download WOD")
)
))
,uiOutput("test")
)
)
server <- function(input, output) {
observeEvent(input$rmd, {
output$test <- renderUI({
withMathJax(includeHTML(rmarkdown::render("create_dailyWorkout.Rmd")))
})
})
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.pdf",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "createdailyworkoutpdf.Rmd")
file.copy("createdailyworkoutpdf.Rmd", tempReport, overwrite = TRUE)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
envir = new.env(parent = globalenv())
)
}
)
}
shinyApp(ui, server)
paste('my-report.pdf')
library(shiny)
library(shinyWidgets)
ui <- shinyUI(
fluidPage(
shinyWidgets::panel(
fluidRow(
column(12, align="center",
actionButton("rmd", "Create Workout"),
downloadButton("downloadReport", "Download WOD")
)
))
,uiOutput("test")
)
)
server <- function(input, output) {
observeEvent(input$rmd, {
output$test <- renderUI({
withMathJax(includeHTML(rmarkdown::render("create_dailyWorkout.Rmd")))
})
})
output$downloadReport <- downloadHandler(
filename = function() {
paste('my-report.pdf')
},
content = function(file) {
src <- normalizePath('createdailyworkoutpdf.Rmd')
# temporarily switch to the temp dir, in case you do not have write
# permission to the current working directory
owd <- setwd(tempdir())
on.exit(setwd(owd))
file.copy(src, 'createdailyworkoutpdf.Rmd', overwrite = TRUE)
library(rmarkdown)
out <- render('createdailyworkoutpdf.Rmd', pdf_document()
)
file.rename(out, file)
}
)
}
shinyApp(ui, server)
library(shiny)
library(shinyWidgets)
ui <- shinyUI(
fluidPage(
shinyWidgets::panel(
fluidRow(
column(12, align="center",
actionButton("rmd", "Create Workout"),
downloadButton("report", "Download WOD")
)
))
,uiOutput("test")
)
)
server <- function(input, output) {
observeEvent(input$rmd, {
output$test <- renderUI({
withMathJax(includeHTML(rmarkdown::render("create_dailyWorkout.Rmd")))
})
})
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "create_dailyWorkout.Rmd")
file.copy("create_dailyWorkout.Rmd", tempReport, overwrite = TRUE)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
envir = new.env(parent = globalenv())
)
}
)
}
shinyApp(ui, server)
if (interactive()) {
ui <- fluidPage(
downloadButton("downloadData", "Download")
)
server <- function(input, output) {
# Our dataset
data <- mtcars
output$downloadData <- downloadHandler(
filename = function() {
paste("data-", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(data, file)
}
)
}
shinyApp(ui, server)
ui <- fluidPage(
downloadButton("downloadData", "Download")
)
server <- function(input, output) {
# Our dataset
data <- mtcars
output$downloadData <- downloadHandler(
filename = function() {
paste("data-", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(data, file)
}
)
}
shinyApp(ui, server)
library(shiny)
library(shinyWidgets)
ui <- shinyUI(
fluidPage(
shinyWidgets::panel(
fluidRow(
column(12, align="center",
actionButton("rmd", "Create Workout"),
downloadButton("report", "Download WOD")
)
))
,uiOutput("test")
)
)
server <- function(input, output) {
observeEvent(input$rmd, {
output$test <- renderUI({
withMathJax(includeHTML(rmarkdown::render("create_dailyWorkout.Rmd")))
})
})
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "create_dailyWorkout.Rmd")
file.copy("create_dailyWorkout.Rmd", tempReport, overwrite = TRUE)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
envir = new.env(parent = globalenv())
)
}
)
}
shinyApp(ui, server)
library(shiny)
library(shinyWidgets)
ui <- shinyUI(
fluidPage(
shinyWidgets::panel(
fluidRow(
column(12, align="center",
actionButton("rmd", "Create Workout"),
downloadButton("report", "Download WOD")
)
))
,uiOutput("test")
)
)
server <- function(input, output) {
observeEvent(input$rmd, {
output$test <- renderUI({
withMathJax(includeHTML(rmarkdown::render("create_dailyWorkout.Rmd")))
})
})
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
withMathJax(includeHTML(rmarkdown::render("create_dailyWorkout.Rmd")))
}
)
}
shinyApp(ui, server)
library(shiny)
library(shinyWidgets)
ui <- shinyUI(
fluidPage(
shinyWidgets::panel(
fluidRow(
column(12, align="center",
actionButton("rmd", "Create Workout"),
downloadButton("report", "Download WOD")
)
))
,uiOutput("test")
)
)
server <- function(input, output) {
observeEvent(input$rmd, {
output$test <- renderUI({
withMathJax(includeHTML(rmarkdown::render("create_dailyWorkout.Rmd")))
})
})
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
withMathJax(includeHTML(rmarkdown::render("create_dailyWorkout.Rmd",
envir = new.env(parent = globalenv()))))
}
)
}
shinyApp(ui, server)
library(shiny)
library(shinyWidgets)
ui <- shinyUI(
fluidPage(
shinyWidgets::panel(
fluidRow(
column(12, align="center",
actionButton("rmd", "Create Workout"),
downloadButton("report", "Download WOD")
)
))
,uiOutput("test")
)
)
server <- function(input, output) {
observeEvent(input$rmd, {
output$test <- renderUI({
withMathJax(includeHTML(rmarkdown::render("create_dailyWorkout.Rmd")))
})
})
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
withMathJax(includeHTML(rmarkdown::render("create_dailyWorkout.Rmd",
output_file = file,
envir = new.env(parent = globalenv()))))
}
)
}
shinyApp(ui, server)
